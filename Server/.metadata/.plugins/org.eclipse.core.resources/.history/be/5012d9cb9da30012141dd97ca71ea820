package eecs493.cardsah.server;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Random;

class Player {//extends Thread{
    public String name;
    public Socket s;
    public DataInputStream in;
    public DataOutputStream out;

    Player(Socket sock){
        try{
            System.out.println("Something connected...");
            s=sock;
            in=new DataInputStream(new BufferedInputStream(s.getInputStream(),
4096));
            out=new DataOutputStream(new BufferedOutputStream(s.getOutputStream(),
4096));
            name=Server.getString(in);
            System.out.println(name);
            
            //out.writeBytes(name + '\0');
            //out.writeInt(5);
            out.flush();
        }catch(Exception e){System.out.println("Player cntr "+e);}
    }
   
    //public void run() {}
   
}

class admin implements Runnable{
    public void run(){
        try {
            ServerSocket ss=new ServerSocket(4041);
            Socket s=null;
            s=ss.accept();
            if(s!=null)
                s.close();
            System.out.println("Someone pressed start");
            Server srvr=new Server();
            srvr.setStart();
            s=new Socket(InetAddress.getLocalHost().getHostAddress(), 1024);
            if(s!=null)
                s.close();
        } catch (IOException e) {System.out.println("Admin "+e);}
    }
}

public class Server {
    static ServerSocket ss;
    static ArrayList<Player> players;
    static int forfeit=-1;
    static boolean start;
    static int curPlayer=0, score, row, col, lettersused;
    static boolean vertical;
    static String word;
   
    static void getConnections(){
        start=false;
        admin a=new admin();
        Thread t=new Thread(a);
        t.start();
        while(!start){
            try {
                Socket s=ss.accept();
                if(start)
                    break;
                players.add(new Player(s));
                sendPlayers();
                //players.get(players.size()-1).start();
                
            } catch (IOException e) {System.out.println("Add connection "+e);}
        }
        sendStarting();
    }
   
    static void sendPlayers(){
        boolean good=true;
        for(int i=0; i<players.size(); i++){
            try {
                players.get(i).out.writeInt(players.size());
                for(int j=0; j<players.size(); j++){
                    players.get(i).out.writeBytes(players.get(j).name + '\0');
                    players.get(i).out.flush();
                }
            } catch (IOException e) {
                System.out.println("remove "+players.get(i).name);
                players.remove(i);
                good=false;
                break;
            }
        }
        if(!good)
            sendPlayers();
    }
   
    void setStart(){
        start=true;
    }
       
    static void sendStarting(){
        int i=0;
        while(i<players.size()){
            try {
                players.get(i).out.writeInt(-1);
                players.get(i).out.flush();
                i++;
            } catch (IOException e) {
                System.out.println("remove "+players.get(i).name);
                players.remove(i);
            }
        }
    }
   
    static void gameplay(){
        try {
            while(true){
                for(int i=0; i<players.size(); i++){
                    if(i==curPlayer)
                        players.get(i).out.writeBoolean(true);
                    else
                        players.get(i).out.writeBoolean(false);
                    players.get(i).out.flush();
                }
                if(getMove())
                    sendMove();
                else
                    sendForfeit();
                updateCurPlayer();
            }
        }catch(IOException e){}
    }
   
    static boolean getMove() throws IOException{
        DataInputStream in=players.get(curPlayer).in;
        row=in.readInt();
        System.out.println("\nr:"+row);
        if(row==-1){
            forfeit=curPlayer;
            players.remove(curPlayer);
            curPlayer--;
            return false;
        }
        col=in.readInt();
        System.out.println("c:"+col);
        vertical=in.readBoolean();
        System.out.println("v:"+vertical);
        word=getString(in);
        System.out.println("w:"+word);
        score=in.readInt();
        System.out.println("s:"+score);
        lettersused=in.readInt();
        System.out.println("l:"+lettersused);
        return true;
    }
   
    public static String getString(DataInputStream in){
        String result = "";
        try{
            /*while (true) {
                char c = in.readChar();
                if (c == '\0')
                    break;
                result += c;
            }*/
            result = in.readUTF();
        }catch(Exception e){System.out.println("GetString "+e);}
        return result;
    }
   
    static void sendMove() throws IOException{
        DataOutputStream out;
        for(int i=0; i<players.size(); i++){
            out=players.get(i).out;
            out.writeInt(row);
            out.writeInt(col);
            out.writeBoolean(vertical);
            out.writeChars(word+'\0');
            out.writeInt(score);
            out.writeInt(lettersused);
            out.flush();
        }
    }
   
    static void sendForfeit() throws IOException{
        DataOutputStream out;
        for(int i=0; i<players.size(); i++){
            out=players.get(i).out;
            out.writeInt(-1);
            out.writeInt(forfeit);
            out.flush();
        }
    }
   
    static void updateCurPlayer(){
        curPlayer++;
        if(curPlayer>=players.size())
            curPlayer=0;
    }
   
    public static void main(String[] args){
        try{
            System.out.println(InetAddress.getLocalHost().getHostAddress());
            ss=new ServerSocket(1024);
            players=new ArrayList<Player>();
            getConnections();
            gameplay();
        }catch (Exception e){
            System.out.println("ERROR: Unusable port");
        }
    }
}